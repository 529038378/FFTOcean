// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

# include "MathUtil.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> InputTex;
RWTexture2D<float4> OutputTex;
RWTexture2D<float4> LutTex;
int Stage;
int GroupSize;
int Size;

[numthreads(8, 8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint2 cor = id;
    cor.x = id.x;
    cor.y = Stage;
    float4 weight = LutTex[cor];
    int reverse = (id.x % GroupSize) >= (GroupSize / 2) ? -1 : 1;
    uint2 pat_cor;
    pat_cor.x = CalBitReverse(id.x);
    pat_cor.y = id.y;
    float real = reverse * weight.x * InputTex[pat_cor].x + InputTex[cor].x;
    float ima = reverse * weight.z * InputTex[pat_cor].z + InputTex[cor].z;
    float mul_real = cos((2 * PI * id.x * id.x) / Size);
    float mul_ima = sin((2 * PI * id.x * id.x) / Size);
    OutputTex[id.xy] = float4(real * mul_real - ima * mul_ima,0, ima * mul_real + real * mul_ima, 0);;
}

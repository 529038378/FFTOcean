// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "SpectrumUtil.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> SpectrumTex;
int Resolution;
float Size;
float Time;
RWBuffer<float> WindDir;
float WindSpeed;
RWBuffer<float> RandomPair;
float Amplitude;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 cor;
    cor.x = 2.0f * PI * ((int)id.x - Resolution/2)/Size;
    cor.y = 2.0f * PI * ((int)id.y - Resolution/2)/Size;
    float2 wind_dir;
    wind_dir.x = WindDir[0];
    wind_dir.y = WindDir[1];
    float2 rand_pair;
    rand_pair.x = RandomPair[0];
    rand_pair.y = RandomPair[1];
    float2 complex = CalPhillipsSpectrum(cor, Time, rand_pair, Amplitude, wind_dir, WindSpeed);
    complex.x = complex.x < 0 ? -complex.x : complex.x;
    complex.y = complex.y < 0 ? -complex.y : complex.y;
    SpectrumTex[id.xy] = float4(complex.x/2, 0, complex.y/2, 1);
}

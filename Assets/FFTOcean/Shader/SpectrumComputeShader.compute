// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "SpectrumUtil.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> SpectrumTex;
int Resolution;
float Size;
float Time;
RWBuffer<float> WindDir;
float WindSpeed;
RWBuffer<float> RandomPair;
float Amplitude;
RWTexture2D<float4> DebugTex;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    SpectrumTex[id.xy] = float4(id.x * 2, 0, 0, 1);
    return;
    float2 wind_dir;
    wind_dir.x = WindDir[0];
    wind_dir.y = WindDir[1];
    float2 rand_pair0;
    rand_pair0.x = RandomPair[0];
    rand_pair0.y = RandomPair[1];
    float2 rand_pair1;
    rand_pair1.x = RandomPair[2];
    rand_pair1.y = RandomPair[3];
    float4 complex = CalPhillipsSpectrum(id.xy, Time, rand_pair0, rand_pair1, Amplitude, wind_dir, WindSpeed, Resolution, Size);
    //float neg = id.x % 2 == 0 ? 1 : -1;
    SpectrumTex[id.xy] = float4(complex.x, 0, complex.y, 1);
    DebugTex[id.xy] = float4(complex.z, 0, complex.w, 1);
}
